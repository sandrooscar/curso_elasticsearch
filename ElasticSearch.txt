*** AULA01
Portas 9200 e 9300
plugin kopf para medir recursos do elastic, apaste deve ser renomeada para kopf e copiada para plugin do elastisearch
http://localhost:9200/_plugin/kopf
PUT /catalogo/_settings
{
    "index" : {
        "number_of_replicas" : 0
    }
}

* Para verificar quanto documentos existem em um tipo dentro de um índice, utilizamos o seguinte comando:

GET /<indice>/<tipo>/_count

* Para localizar um documento pelo seu identificador, basta utilizar o seguinte comando:

GET /<indice>/<tipo>/<identificator>

* Por fim, para retornar todos os documentos em de um tipo sem aplicar filtro algum, basta utilizar o comando:

GET /<indice>/<tipo>/_search

=> Implicitamente utiliza http://localhost:9200/<indice>/<tipo>/_search

O que aprendemos?
O que é e para que serve o ElasticSearch.
Como fazer uma instalação básica do ElasticSeach a ser usada em uma única máquina.
Como instalar plugins no ElasticSearch.
Como utilizar um cliente REST para criar e localizar documentos por identificador, listar todos os documentos ou aplicar um valor simples para consulta.
Como alterar o número de réplicas de um índice.

* Para listar todos os documentos sem filtro nenhum podemos usar:

GET /catalogo/pessoas/_search
{}
Para aplicar algum filtro usa-se o parâmetro o parâmetro q:

GET /catalogo/pessoas/_search?q=futebol

http://solr-vs-elasticsearch.com/

*** AULA02
HTTP HEAD
executado via curl
- retorna apenas cabecalhos http
- não retorna o documento
- server para saber se existe o documento
Diz se o documento existe ou não sem carregaro o documento

é equivalente ao:
select 1 from pedido where pedido = 1 

curl -XHEAD -v http://localhost:9200/catalogo/pessoas/1

_version é o controle de versão dos documentos quando atualizados

Acessando HEAD /index/type/id é equivalente ao comando:

select 1 from TYPE where id = ID;

verbo POST atualizando documento parcial
catalogo/pessoas/1/_update
{
  "doc": {
    "nome": "Rob Halford"
  }
}

Normalmente o POST cria documento
catalogo/pessoas/150
POST /catalogo/pessoas
{
    "nome" : "Tony Stark",
    "interesses" : ["futebol", "música", "literatura"],
    "cidade" : "São Paulo",
    "formação" : "Letras",
    "estado" : "SP",
    "país" : "Brasil"
}

Documents no ElasticSearch são imutaveis

* Sobre Shard
Quando existe necessidade de aramazenar o indice em várias lugares, é necessário criar shard (tradução "caquinhos")
(no mundo banco de dados é visto como partição). É pegar 10Gb e quebrar em shard de 2.5Gb.

=> Shard não devem ultrapassar 50Gb

Shard primária (primary shards): é a shard onde as operações de escrita como criação, atualização ou remoção de um documento acontece primeiro.
Shard réplica (replica shard): é a shard que, uma vez que a operação de escrita tenha sido concluída com sucesso na sua respectiva shard primária, recebe a mesma operação para que ela seja replicada. A operação só será confirmada para o cliente quando todas as réplicas confirmarem a replicação. Logo, quando recebemos o HTTP OK para uma operação de escrita, sabemos que a informação esta segura em todas as réplicas.

O que aprendemos?
O que é um índice e um tipo.
Como utilizar a API Rest para operações de criação, atualização, remoção e verificação de existência de documentos no ElasticSearch.
A analogia entre ElasticSearch e um banco de dados relacionais.
O que são shards, réplicas e qual a sua importância.

O comando HEAD não retorna conteúdo, ele verifica se o documento, cujo identificador é ID (no exemplo do exercício, o ID é 1), existe para o tipo TYPE (no exemplo do exercício, o TYPE é pessoas) no índice INDEX (no exemplo do exercício, o INDEX é catalogo). Caso o documento exista, é retornado o código HTTP 200 , caso contrário, é retornado o código HTTP 404.

PUT é obrigatório. Caso já exista um documento com esse id, o documento será substituído. Caso não exista um documento com esse id, ele será criado.

PUT substitui o documento, ou seja, se fizermos:

PUT /catalogo/pessoas/1
{
    "nome": "Douglas Quintanilha"
}
Substituiremos o documento de id, logo ele só conterá o atributo nome.

*** AULA03 - Pesquisando e analisando seus dados
catalogo/pessoas/_search?q=futebol
equivale
catalogo/pessoas/_search?q=_all:futebol

busca campo especifico (como nos bds tradicionais)
catalogo/pessoas/_search?q=estado:sp

* Cabecalho
took => tempo em milisegundos
max_score: valor entre 0 e 1. Relevância ou valor da semelhança

* Paginacao
/catalogo/pessoas/_search?q=futebol&size=1&from=0

O que aprendemos?
O campo _all e como ele é utilizado.
Podemos especificar o campo na busca usando campo:termo.
ElasticSearch retorna 10 resultados por padrão.
Entender as estatísticas que são parte da resposta de requisições de busca, como tempo de resposta e hits.

Quando omitimos um campo específico na busca, o Elastic Search assume que queremos buscar no campo _all, logo a resposta correta é:

_search?q=_all:futebol

Quando queremos limitar a busca apenas um campo, basta fazer:

_search?q=interesses:futebol

A sintaxe sempre é campo:termo , mas se queremos adicionar mais um campo para a busca, temos que utilizar o caractere & para unir as duas buscas, deste modo;

_search?q=interesses:futebol&cidade:rio

Para limitarmos a quantidade de dados devemos utilizar o termo size, passando com o = a quantidade que queremos limitar.

Então, fazemos a buscar normal:

_search?q=interesses:futebol

mas vamos utilizar o operador & para adicionar um limite a busca com o size:

_search?q=interesses:futebol&size=50

Assim esta busca nos retornará apenas os primeiros 50 registros !

Relembrando, sempre que realizamos uma busca, devemos utilizar a sintaxe campo:termo, então se queremos buscar pelo termo fermento no campo ingredientes, vamos usar ingredientes:fermento, mas como queremos limitar a 30 resultados, utilizaremos o operador & para concatenar o size=30 ao resto da busca, ficando no final:

_search?q=ingredientes:fermento&size=3

Para ajudar nosso amigo desenvolvedor, temos que utilizar o conhecimentos que já temos para selecionar os ingredientes que possuem farinha:

_search?q=ingredientes:farinha

Além disso, também precisamos limitar o tamanho dos resultados para 10, então vamos utilizar o operador & para adicionar um novo limitador a busca:

_search?q=ingredientes:farinha&size=10

E precisamos que a nossa exibição comece a partir do vigésimo resultado, e para isto vamos utilizar o termo from=20 a nossa busca , concatenando com o operado &:

_search?q=ingredientes:farinha&size=10&from=20

Assim, nossa busca irá retornar todas as receitas que tem farinha nos ingredientes, mostrando em lotes de 10 resultados, a partir do vigésimo!

API Scroll
Quando utilizamos paginação simples, temos que tomar cuidado para não causarmos instabilidade no cluster. Caso solicitemos 10.000 registros, todas as shards participantes na consulta podem retornar esta quantidade. Por exemplo, caso tenhamos 3 shards com 100.000 documentos em cada e pedimos os primeiros 10.000 resultados, o nó coordenador terá de processar 30.000 documentos, executar a ordenação e pegar os primeiros 10.000.

Para detalhes, veja este link:

https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html

*** AULA04 - Mapeamento de tipos
Não posso alterar tye das propriedades de um tipo
Posso criar outra propriedade para importar os dados da campo antigo
Por padrão, quando criamos documentos no ElasticSearch em índices e tipos que não foram previamente criados, o próprio ElasticSeach analisa o primeiro documento recebido e infere os tipos de dados. Para olharmos o que foi inferido, basta utilizamos a API _mapping:

GET catalogo/_mapping/pessoas

Importante: Ainda que novos documentos possam ter novos atributos que não foram previamente mapeados, mapeamentos para atributos já existentes não podem ser alterados.
https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html

Exercicio exemplo utilizando date
/my_index_date/doc_date

O que aprendemos?
Como verificar os mappings para nossos documentos.
Tipos de dados existentes do ElasticSearch.
Inferência de tipos pelo ElasticSearch.

*** AULA05 - Quebrando os textos com Analyzers
Analyzer  whitespace
faz split das palavras 

Analyzer simples (simple)
tira tudo que não tiver letra e reduz pra lowercase

Analyzer padrão (standard)
tira espaços e pontuação, passa pra lowercase e NÂO REMOVE os números

Analyzer idiomas (portuguese, english)
técnicas de remoção de acentos e plural por exemplo, permite criar sinônimos.

Analyzer padrão: Este é o analyzer padrão usado pelo ElasticSearch e em geral funciona bem independente do idioma. Ele funciona quebrando o texto em palavras removendo pontuações e passando todo conteúdo para letras minúsculas. Números existentes no texto são mantidos. Por exemplo: "Eu nasci há 10 mil (sim, 10 mil) anos atrás" gera as seguintes entradas "eu", "nasci", "há", "10", "mil", "sim", "10", "mil", "anos", "atrás".

Analyzer simples: Quebra o texto em tudo o que não seja uma letra e passando todo o texto para letras minúsculas. Como números não são letras, eles não geram entradas. E.g.: "Eu nasci há 10 mil (sim, 10 mil) anos atrás" gera as seguintes entradas "eu", "nasci", "há", "mil", "sim", "mil", "anos", "atrás".

Analyzer de espaço em branco: Quebra o texto por espaços em branco. Não há alteração na caixa das letras. Por exemplo: "Eu nasci há 10 mil (sim, 10 mil) anos atrás" gera as seguintes entradas "Eu", "nasci", "há", "10", "mil", "(sim", "10", "mil)", "anos", "atrás".

Analyzers específicos para idiomas: São analyzers que quebram o texto assim como o analyzer padrão, porém são capazes de aplicar peculiaridades do idioma e melhorar a geração das entradas para um idioma em específico. Técnicas como singularização dos termos, remoção de palavras que não possuem relevância para o resultado, como palavras comuns do idioma e uso da palavra na sua forma mais raíz (conhecido como stemming), são aplicadas.

https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html

https://www.elastic.co/guide/en/elasticsearch/guide/current/inverted-index.html

O que aprendemos?
Como a busca exata e a busca de texto cheio são diferentes.
O que são e como usar os analyzers para incrementar nossas buscas.
Como verificar como um analyzer vai indexar um determinado texto.
Como alterar o analyzer do campo _all do padrão para portuguese e melhorar nossas buscas.

Na criação do índice, indicamos a configuração de cada atributo que queremos que seja analizado, e em seguida dizemos qual tipo do analizador iremos usar.

Repare também que fizemos configurações individuais em cada atributo, nos permitindo escolher qual analizador isoladamente, e até mesmo deixando de usar o analizer no caso do atributo estado.

{
  "settings": {
    "index": {
      "number_of_shards": 3,
      "number_of_replicas": 0
    }
  },
  "mappings": {
    "pessoas_v2": {
      "_all": {
        "type": "string",
        "index": "analyzed",
        "analyzer": "portuguese"
      },
      "properties": {
        "cidade": {
          "type": "string",
          "index": "analyzed",
          "analyzer": "portuguese"
        },
        "estado": {
          "type": "string"
        },
        "formação": {
          "type": "string",
          "index": "analyzed",
          "analyzer": "portuguese"
        },
        "interesses": {
          "type": "string",
          "index": "analyzed",
          "analyzer": "portuguese"
        },
        "nome": {
          "type": "string",
          "index": "analyzed",
          "analyzer": "portuguese"
        },
        "país": {
          "type": "string",
          "index": "analyzed",
          "analyzer": "portuguese"
        }
      }
    }
  }
}

O padrão do ElasticSearch é buscar no documento um termo ou (OR, em inglês) outro. Para buscar documentos que contenham os dois termos (musica e brasil), nós precisamos utilizar o AND. Atenção para a caixa alta, se for em caixa baixa, o ElasticSearch interpretará como mais um termo a ser buscado.

Logo, a opção correta é:

/catalogo_v2/pessoas/_search?q=musica+AND+brasil

O campo _all pode ser totalmente customizado ou mesmo desabilitado. Neste capítulo nós trocamos o analyzer standard para o analyzer portuguese, porém podemos ir mais adiante e definir, por exemplo quais atributos devem ir para o campo _all e qual o peso (boost) de cada atributo em uma busca.

Objetos aninhados são mapeados de maneira semelhante a objetos não aninhados. Basta utilizar como tipo de dados object e definir as propriedades. Esta abordagem funciona de forma recursiva.

https://www.elastic.co/guide/en/elasticsearch/guide/current/complex-core-fields.html